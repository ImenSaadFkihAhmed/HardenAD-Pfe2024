function Start-HardenADLocalGroups () {
    <#
        .SYNOPSIS
         To use the <Start-HardenADLocalGroups> function, you have to load the <HADLocalAdmins> module on your domain controllers.         
        .DESCRIPTION
         This function has several modes:
            - Without switches
                Without switches, the module runs completely without changing its parameters. It will execute all modes.
            - "Create"
                This mode will only create the groups and move the duplicates
            - "Delete"
                This mode moves all groups that do not have an associated machine to an "inactive" OU
            - Without parameters
                Parameters are loaded by default. Be careful, these parameters may not correspond to your environment.
                environment. To modify these parameters, edit the table called "CustomParameters".
            - With parameters
                It is also possible to load your own parameter table to overwrite the existing one. However, please 
                make sure to use the same format as the one generated by default. 
        .OUTPUTS
         This function does not return anything directly. However, a log file is created to log each script launch.
         This file is available at the location chosen in the $Path variable 
        .EXAMPLE
         C:\PS> Start-HardenADLocalGroups
         By calling the command without parameters, the "create" and "delete" modes will be executed in turn.
         
         C:\PS> Start-HardenADLocalGroups -Create -CustomParameters @{...}
         By specifying the create mode, the script will execute only the creation and adaptation of groups.
         By specifying custom parameters (-CustomParameters), the script will execute using the parameters present in the HashTable (@{...})
        .NOTES
        This script is the only public script of the module. It can be called from anywhere.
        We recommend to run it from one or more scheduled tasks based on audit events.
    #>

    [CmdletBinding()]
    param (
        [Parameter(
            HelpMessage = "This switch initiates the delete mode only"
        )]
        [switch] $Delete,
        [Parameter(
            HelpMessage = "This switch initiates the create mode only"
        )]
        [switch] $Create,
        [Parameter(
            HelpMessage = "."
        )]
        [string] $ComputerName,
        [Parameter(
            HelpMessage = "This parameter takes the ID of the event that triggered the scheduled task"
        )]
        [int] $EventID,
        [Parameter(
            HelpMessage = "This parameter takes the old DN when moving OU"
        )]
        [System.Array] $OldDN,
        [Parameter(
            HelpMessage = "This parameter takes the new DN when moving OU"
        )]
        [System.Array] $NewDN
    )

    $ErrorActionPreference = "SilentlyContinue"
    $LogPath = "$env:windir\HardenAD\Logs"

    if (!(Test-Path $LogPath)) {
        try {
            New-Item -Path $LogPath -ItemType Directory -Force
        }
        catch {
            Write-Error -ErrorRecord $Error[0] `
                -RecommendedAction "Unable to create the Harden folder. Make sure you can write to this location: {0}." -f "$env:windir\Logs\"
            exit
        }
    }
    
    [LoggerFactory]::Initialize($LogPath)
    $Log = [LoggerFactory]::CreateLogger()
    
    $Config = @{}
    $CustomParameters = @{}
    $XMLConfigFile = [xml](Get-Content "$PSScriptRoot\..\Configs\Config.xml")

    $XMLConfigFile.Config.Keys | ForEach-Object {  
        $CustomParameters[$_.Name] = $_.Value 
    }

    $ComputerName = $ComputerName.Replace("$", "")

    try {
        $Config["COMPUTERS"] = Get-ADComputer -Identity $ComputerName -Properties *
        $Log.Success(("{0} has been found!" -f $ComputerName))
    }
    catch {
        $Config["COMPUTERS"] = Get-ADComputer -Filter { Enabled -eq $true } -Properties *
        $Log.Warning(("Computer was not provided or is incorrect: {1}`nLoading all computers..." -f $ComputerName, $_.Exception.Message))
    }
   
    Set-ConfigTable $Config $CustomParameters

    try {
        $Config["TBC_T0"] = Get-ADOrganizationalUnit -SearchBase $Config["LA_T0"] -Filter { Name -eq "TBC" }

        if (!$Config["TBC_T0"]) {
            $Config["TBC_T0"] = New-ADOrganizationalUnit -Name "TBC" -Path $Config["LA_T0"] -PassThru
            #$Config["TBC_T0_SRV"] = New-ADOrganizationalUnit -Name "Servers" -Path $Config["TBC_T0"] -PassThru
            #$Config["TBC_T0_WKS"] = New-ADOrganizationalUnit -Name "Workstations" -Path $Config["TBC_T0"] -PassThru
            $Log.Success("To be classified OUs has been created in Local Admins OUs.")
        }
        <#
        else {
            $Config["TBC_T0_SRV"] = Get-ADOrganizationalUnit -SearchBase $Config["TBC_T0"] -Filter { Name -eq "Servers" }
            $Config["TBC_T0_WKS"] = Get-ADOrganizationalUnit -SearchBase $Config["TBC_T0"] -Filter { Name -eq "Workstations" }
        }
        #>
    }
    catch [Microsoft.ActiveDirectory.Management.ADException] {
    }
    catch {
        $Log.Error("An error occurred during the creation of the OU: {0}." -f $_.Exception.Message)
    }

    if ($EventID -eq 5139) {
        $Log.Info(("Moving mode."))
        Move-LocalAdminGroup $Config $OldDN $NewDN
    }
    elseif ($EventID -eq 4743 -or $Delete) {
        $Log.Info(("Delete mode. {0}" -f $ComputerName))
        Remove-LocalAdminGroup $Config $ComputerName
    }
    elseif ($EventID -eq 4741 -or $Create) {
        $Log.Info(("Create mode."))
        New-LocalAdminGroup $Config
    }
    else {
        $Log.Info(("Both mode."))
        New-LocalAdminGroup $Config
        Remove-LocalAdminGroup $Config
    }
}